{
	"setJobStopped": {
		"query": "MATCH (node:Job {instanceId: $instanceId, instanceName: $instanceName } ) SET node.stopTime = $stopTime, node.stopTimeEpoch = $stopTimeEpoch, node.stoppedBy = $stoppedBy, node.status = $status, node.durationMinutes = duration.inSeconds(datetime(node.startTime), datetime(node.stopTime)).minutes RETURN node",
		"parameters"
	},
	"launchGatk5Dollar": {
		"query": "MATCH (s:PersonalisSequencing {sample: $sample})-[:GENERATED]->(:Fastq)-[:WAS_USED_BY]->(:Job)-[:GENERATED]->(n:Ubam), (s)-[:GENERATED]->(c:Checksum) WHERE NOT (s)-[*4]->(:JobRequest:Gatk5Dollar) WITH s.sample AS sample, c.fastqCount AS fastqSetSize, n.readGroup AS readGroup, COLLECT(DISTINCT n) AS allNodes WITH fastqSetSize, head(allNodes) AS heads UNWIND [heads] AS uniqueNodes WITH uniqueNodes.sample AS sample, fastqSetSize, COLLECT(uniqueNodes) AS sampleNodes WHERE size(sampleNodes) = fastqSetSize/2 CREATE (j:JobRequest:Gatk5Dollar {sample: sample, nodeCreated: datetime(), nodeCreatedEpoch: datetime().epochSeconds, name: 'gatk-5-dollar', eventId: {event_id} }}) WITH sampleNodes, sample, j.eventId AS eventId, j.nodeCreatedEpoch AS epochTime UNWIND sampleNodes AS sampleNode MATCH (jobReq:JobRequest:Gatk5Dollar { sample: sample, eventId: eventId}) MERGE (sampleNode)-[:WAS_USED_BY]->(jobReq) RETURN DISTINCT(sampleNodes) AS nodes",
		"parameters": {
			"sample": "str"
		},
		"returns": {
			"nodes": "nodes"
		},
		"write_transaction": true
	},
	"launchFastqToUbam" : {
		"query": "MATCH (n:Fastq { sample: $sample, readGroup: $readGroup} }}) WHERE NOT (n)-[:WAS_USED_BY]->(:JobRequest:FastqToUbam) WITH n.sample AS sample, n.matePair AS matePair, COLLECT(n) AS matePairNodes WITH sample, COLLECT(head(matePairNodes)) AS uniqueMatePairs WHERE size(uniqueMatePairs) = 2 CREATE (j:JobRequest:FastqToUbam { sample:sample, nodeCreated: datetime(), nodeCreatedEpoch: datetime().epochSeconds, name: 'fastq-to-ubam', eventId: $eventId }) WITH uniqueMatePairs, j, sample, j.eventId AS eventId UNWIND uniqueMatePairs AS uniqueMatePair MERGE (uniqueMatePair)-[:WAS_USED_BY]->(j) RETURN DISTINCT(uniqueMatePairs) AS nodes",
		"parameters": {
			"sample": "str",
			"readGroup": "int"
		},
		"returns": {
			"nodes": "nodes"
		}
	},
	"relateGvcfToTbi": {
		"query": "MATCH (gvcf:Gvcf)<-[:GENERATED]-(step:CromwellStep)-[:GENERATED]->(tbi:Tbi) WHERE step.cromwellWorkflowId = $cromwellId AND step.wdlCallAlias = “mergevcfs” MERGE (gvcf)-[r:HAS_INDEX {ontology: 'bioinformatics'}]->(tbi) RETURN gvcf, r, tbi",
		"parameters": {
			"cromwellId": "str"
		},
		"returns": {
			"gvcf": "node",
			"r": "relationship",
			"tbi": "node"
		},
		"write_transaction": true
}
