--- !DatabaseQuery
# This query will relate both fastqs of a read group to each other with mutual HAS_MATE_PAIR relationships. It will relate all of the Fastqs in all of the read groups of a sample.
name: relateFastqMatePair
cypher: 'MATCH (sample:Sample)-[:HAS_READ_GROUP]->(readGroup:ReadGroup) WHERE sample.sample = $sample WITH readGroup MATCH (fastq1:Fastq)<-[:HAS_FASTQ]-(readGroup)-[:HAS_FASTQ]->(fastq2:Fastq) MERGE (fastq1)-[rel:HAS_MATE_PAIR]->(fastq2) RETURN fastq1, rel, fastq2'
required_parameters:
  sample: str
write_transaction: true
publish_to:
  - TOPIC_TRIGGERS
#job_request: null
indexes:
  Sample:
    - sample
returns:
  -
    start: Fastq
    relationship: HAS_MATE_PAIR
    end: Fastq
aggregate_results: false
redundant: true
--- !DatabaseQuery
# This query will find the fastqs of the specified sample & read group properties and merge a ReadGroup node to the database that matches those properties. It will then relate the read group to the fastqs.
name: relateFastqToReadGroup
cypher: 'MATCH (fastq:Fastq {readGroup: $read_group, sample: $sample}) MERGE (readGroup:ReadGroup {readGroup: $read_group, sample:$sample}) WITH fastq, readGroup MERGE (readGroup)-[rel:HAS_FASTQ]->(fastq) RETURN readGroup, rel, fastq'
required_parameters:
  sample: str
  read_group: int
write_transaction: true
publish_to:
  - TOPIC_TRIGGERS
#job_request: null
indexes:
  Fastq:
    - sample
    - readGroup
returns:
  -
    start: ReadGroup
    relationship: HAS_FASTQ
    end: Fastq
aggregate_results: false
redundant: true
--- !DatabaseQuery
# This query will find any read groups of the specified sample, merge a sample node to the database, and then relate the sample to those read groups.
name: relateReadGroupToSample
cypher: 'MATCH (readGroup:ReadGroup {sample: $sample}) MERGE (sample:Sample {sample: $sample}) WITH readGroup, sample MERGE (sample)-[rel:HAS_READ_GROUP]->(readGroup) RETURN sample, rel, readGroup'
required_parameters:
  sample: str
write_transaction: true
publish_to:
  - TOPIC_TRIGGERS
#job_request: null
indexes:
  ReadGroup:
    - sample
returns:
  -
    start: Sample
    relationship: HAS_READ_GROUP
    end: ReadGroup
aggregate_results: false
redundant: true
--- !DatabaseQuery
name: launchFastqToUbam
cypher: 'MATCH (sample:Sample {sample: $sample})-[:HAS_READ_GROUP]->(readGroup:ReadGroup {readGroup: $read_group})-[:HAS_FASTQ]->(fastq1:Fastq {matePair: 1})-[rel:HAS_MATE_PAIR]->(fastq2:Fastq {matePair: 2}) WHERE NOT (readGroup)-[:HAS_JOB_REQUEST]->(:JobRequest {name: ''fastq-to-ubam''}) MERGE (readGroup)-[:HAS_JOB_REQUEST]->(jobRequest:JobRequest {name: ''fastq-to-ubam'', sample: $sample, readGroup: $read_group, nodeCreated: datetime(), nodeCreatedEpoch: datetime().epochSeconds, jobRequestUuid: randomUUID() }) MERGE (fastq1)<-[:REQUESTED_INPUT]-(jobRequest)-[:REQUESTED_INPUT]->(fastq2) RETURN jobRequest'
required_parameters:
  sample: str
  read_group: int
write_transaction: true
publish_to:
  - TOPIC_JOB_LAUNCHER
#job_request: fastq-to-ubam
indexes:
  Sample:
    - sample
returns:
  -
    start: JobRequest
aggregate_results: false
redundant: false
--- !DatabaseQuery
name: createDsubJobNode
cypher: 'CREATE (dsubJob:Dsub {name: $name, dsubJobId: $dsubJobId, dstatCmd: $dstatCmd, jobRequestId: $jobRequestId, minCores: $minCores, minRam: $minRam, bootDiskSize: $bootDiskSize, diskSize: $diskSize, image: $image, logging: $logging, script: $script, provider: $provider}) RETURN dsubJob'
required_parameters:
  name: str
  dsubJobId: str
  dstatCmd: str
  jobRequestId: str
  minCores: int
  minRam: float
  bootDiskSize: int
  diskSize: int
  image: str
  logging: str
  script: str
  provider: str
write_transaction: true
publish_to:
  - TOPIC_TRIGGERS
returns:
  -
    start: DsubJob
aggregate_results: false
redundant: false