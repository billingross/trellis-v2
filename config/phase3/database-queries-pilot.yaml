--- !DatabaseQuery
name: relateGenomeToFastq
cypher: "MATCH (fastq:Fastq)<-[]-(:PersonalisSequencing)<-[]-(s:Sample)<-[]-(:Person)-[]->(genome:Genome) WHERE s.sample = $sample AND NOT (genome)-[:HAS_SEQUENCING_READS]->(fastq) MERGE (genome)-[rel:HAS_SEQUENCING_READS]->(fastq) RETURN genome, rel, fastq" 
required_parameters:
  sample: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
indexes:
  Sample: 
    - sample
returns:
  -
    start: Genome
    relationship: HAS_SEQUENCING_READS
    end: Fastq
aggregate_results: false
# Indicates that this query can return results from multiple operational threads
redundant: true
--- !DatabaseQuery
name: mergeBiologicalNodes
cypher: "MATCH (seq:PersonalisSequencing) WHERE seq.sample = $sample MERGE (seq)<-[:WAS_USED_BY {ontology: 'provenance'}]-(:Sample {sample: $sample})<-[:GENERATED {ontology:'provenance'}]-(:Person {sample: $sample})-[:HAS_BIOLOGICAL_OME {ontology:'bioinformatics'}]->(genome:Genome {sample: $sample}) RETURN genome"
required_parameters:
  sample: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
indexes:
  Sample:
    - sample
returns:
  -
    start: Sample
    relationship: WAS_USED_BY
    end: PersonalisSequencing
  -
    start: Person
    relationship: GENERATED
    end: Sample
  -
    start: Person
    relationship: HAS_BIOLOGICAL_OME
    end: Genome
aggregate_results: false
--- !DatabaseQuery
# I could make this a redundant query by looking up fastqs by sample instead of uri
# Could I then also eliminate the fastq(uri) index?
name: relateFastqToPersonalisSequencing
cypher: "MATCH (seq:PersonalisSequencing), (fastq:Fastq) WHERE fastq.uri=$uri AND seq.sample=fastq.sample MERGE (seq)-[rel:GENERATED]->(fastq) RETURN seq, rel, fastq"
required_parameters:
  sample: str
  uri: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
indexes:
  Fastq:
    - uri
  PersonalisSequencing:
    - sample
returns:
  -
    start: PersonalisSequencing
    relationship: GENERATED
    end: Fastq
aggregate_results: false
--- !DatabaseQuery
name: relatePersonalisSequencingToFastqs
cypher: "MATCH (seq:PersonalisSequencing), (fastq:Fastq) WHERE seq.sample=$sample AND fastq.sample=seq.sample MERGE (seq)-[rel:GENERATED]->(fastq) RETURN seq, rel, fastq"
required_parameters:
  sample: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
indexes:
  Fastq:
    - sample
  PersonalisSequencing:
    - sample
returns:
  -
    start: PersonalisSequencing
    relationship: GENERATED
    end: Fastq
aggregate_results: false
redundant: true
--- !DatabaseQuery
name: relateFastqMatePair
cypher: 'MATCH (r1:Fastq)<-[:GENERATED]-(seq:PersonalisSequencing)-[:GENERATED]->(r2:Fastq)
  WHERE seq.sample = $sample
  AND r1.readGroup = $read_group
  AND r2.readGroup = $read_group
  AND r1.matePair = 1
  AND r2.matePair = 2
  MERGE (r1)-[rel:HAS_MATE_PAIR]->(r2)
  RETURN r1, rel, r2'
required_parameters:
  sample: str
  read_group: int
write_transaction: true
publish_to:
  - TOPIC_TRIGGERS
job_request: null
indexes:
  PersonalisSequencing:
    - sample
returns:
  -
    start: Fastq
    relationship: HAS_MATE_PAIR
    end: Fastq
aggregate_results: false
redundant: false
--- !DatabaseQuery
name: relateMicroarrayToPersonalisSequencing
cypher: "MERGE (seq:PersonalisSequencing {sample: $sample}) WITH seq MATCH (micro:Microarray) WHERE micro.uri=$uri MERGE (seq)-[rel:GENERATED]->(micro) RETURN seq, rel, micro"
required_parameters:
  uri: str
  sample: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
returns:
  -
    start: PersonalisSequencing
    relationship: GENERATED
    end: Microarray
aggregate_results: false
--- !DatabaseQuery
name: relateChecksumToPersonalisSequencing
cypher: "MERGE (seq:PersonalisSequencing {sample: $sample}) WITH seq MATCH (checksum:Checksum) WHERE checksum.uri=$uri MERGE (seq)-[rel:GENERATED]->(checksum) RETURN seq, rel, checksum"
required_parameters:
  uri: str
  sample: str
write_transaction: true
publish_to: 
  - TOPIC_TRIGGERS
job_request: null
returns:
  -
    start: PersonalisSequencing
    relationship: GENERATED
    end: Checksum
aggregate_results: false
--- !DatabaseQuery
name: launchFastqToUbam
cypher: 'MATCH (seq:PersonalisSequencing)-[:GENERATED]->(r1:Fastq)-[rel:HAS_MATE_PAIR]->(r2:Fastq) 
  WHERE seq.sample = $sample
  AND r1.readGroup = $read_group
  AND r2.readGroup = $read_group
  AND r1.matePair = 1
  AND r2.matePair = 2 
  AND NOT (r1)-[:WAS_USED_BY]->(:JobRequest {name: ''fastq-to-ubam''})
  AND NOT (r2)-[:WAS_USED_BY]->(:JobRequest {name: ''fastq-to-ubam''})
  CREATE (job_request:JobRequest {name: ''fastq-to-ubam'',
    sample: $sample,
    nodeCreated: datetime(),
    nodeCreatedEpoch: datetime().epochSeconds})
  WITH r1, rel, r2, job_request 
  LIMIT 1 
  MERGE (r1)-[:WAS_USED_BY]->(job_request)
  MERGE (r2)-[:WAS_USED_BY]->(job_request)
  RETURN r1, rel, r2'
required_parameters:
  sample: str
  read_group: int
write_transaction: true
publish_to:
  - TOPIC_JOB_LAUNCHER
job_request: fastq-to-ubam
returns:
  -
    start: Fastq
    relationship: HAS_MATE_PAIR
    end: Fastq
aggregate_results: false